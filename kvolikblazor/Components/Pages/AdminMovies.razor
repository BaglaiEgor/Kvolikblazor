@page "/adminmovies"
@using kvolikblazor.Model
@inject HttpClient Http
@inject IJSRuntime JS
@rendermode InteractiveServer

<style>
    body {
        background-color: #f5f5f5;
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 20px;
    }
</style>

<div class="container">
    <h3>Управление фильмами</h3>
    <h4>Список фильмов</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Жанр</th>
                <th>Рейтинг</th>
                <th>Дата выхода</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.Genre</td>
                    <td>@movie.Rating</td>
                    <td>@movie.ReleaseDate.ToShortDateString()</td>
                    <td>
                        <button @onclick="() => EditMovie(movie)" class="btn btn-warning">Редактировать</button>
                        <button @onclick="() => DeleteMovie(movie.id_Movie)" class="btn btn-danger">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <h4>@(isEditing ? "Редактировать фильм" : "Добавить новый фильм")</h4>
    <EditForm Model="newMovie" OnValidSubmit="isEditing ? HandleUpdateMovie : HandleCreateMovie" FormName="form">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputText id="Title" @bind-Value="newMovie.Title" placeholder="Название" class="form-control" />
        </div>
        <div class="form-group">
            <InputTextArea id="Description" @bind-Value="newMovie.Description" placeholder="Описание" class="form-control" />
        </div>
        <div class="form-group">
            <InputText id="Genre" @bind-Value="newMovie.Genre" placeholder="Жанр" class="form-control" />
        </div>
        <div class="form-group">
            <InputDate id="ReleaseDate" @bind-Value="newMovie.ReleaseDate" class="form-control" />
        </div>
        <div class="form-group">
            <InputNumber id="Rating" @bind-Value="newMovie.Rating" class="form-control" />
        </div>
        <div class="form-group">
            <InputFile id="moviePhoto" OnChange="HandleFileSelected" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">@((isEditing) ? "Сохранить" : "Добавить фильм")</button>
        @if (isEditing)
        {
            <button type="button" class="btn btn-secondary" @onclick="ResetForm">Отмена</button>
        }
    </EditForm>
</div>

@code {
    private bool isEditing = false;
    private Movies newMovie = new Movies();
    private List<Movies> movies = new List<Movies>();
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles(1).FirstOrDefault();
    }

    private async Task LoadMovies()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7294/api/Movie");
            if (response.IsSuccessStatusCode)
            {
                movies = await response.Content.ReadFromJsonAsync<List<Movies>>();
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка загрузки фильмов: {ex.Message}");
        }
    }

    private async Task HandleUpdateMovie()
    {
        try
        {
            if (selectedFile != null)
            {
                var filePath = Path.Combine("wwwroot/images", selectedFile.Name);

                if (!System.IO.File.Exists(filePath))
                {
                    var stream = selectedFile.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);

                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await stream.CopyToAsync(fileStream);
                    }
                }

                newMovie.ImageUrl = $"/images/{selectedFile.Name}";
            }
            var response = await Http.PutAsJsonAsync($"https://localhost:7294/api/Movie/{newMovie.id_Movie}", newMovie);
            if (response.IsSuccessStatusCode)
            {
                await LoadMovies();
                ResetForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка обновления фильма: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private async Task HandleCreateMovie()
    {
        try
        {
            if (selectedFile != null)
            {
                var filePath = Path.Combine("wwwroot/images", selectedFile.Name);

                if (!System.IO.File.Exists(filePath))
                {
                    var stream = selectedFile.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);

                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await stream.CopyToAsync(fileStream);
                    }
                }

                newMovie.ImageUrl = $"/images/{selectedFile.Name}";
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Пожалуйста, выберите изображение.");
                return;
            }

            var response = await Http.PostAsJsonAsync("https://localhost:7294/api/Movie", newMovie);
            if (response.IsSuccessStatusCode)
            {
                ResetForm();
                await LoadMovies();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Ошибка при добавлении фильма.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Произошла ошибка: " + ex.Message);
        }
    }

    private async Task EditMovie(Movies movies)
    {
        newMovie = movies;
        isEditing = true;
    }

    private async Task DeleteMovie(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7294/api/Movie/{id}");

            if (response.IsSuccessStatusCode)
            {
                await LoadMovies();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка удаления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при удалении пользователя: {ex.Message}");
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        newMovie = new Movies();
        selectedFile = null;
        isEditing = false;
    }

    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }
}